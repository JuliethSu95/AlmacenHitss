//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlmacenHITSS.Persistencia
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AlmacenIngresoHitssEntities1 : DbContext
    {
        public AlmacenIngresoHitssEntities1()
            : base("name=AlmacenIngresoHitssEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<TipoIdentificacion> TipoIdentificacion { get; set; }
        public virtual DbSet<Venta> Venta { get; set; }
    
        public virtual int ActualizarCliente(Nullable<int> iDCLIENTE, Nullable<int> tipoIdentificacion, string numeroIdentificacion, string nombres, string apellidos, string telefono)
        {
            var iDCLIENTEParameter = iDCLIENTE.HasValue ?
                new ObjectParameter("IDCLIENTE", iDCLIENTE) :
                new ObjectParameter("IDCLIENTE", typeof(int));
    
            var tipoIdentificacionParameter = tipoIdentificacion.HasValue ?
                new ObjectParameter("TipoIdentificacion", tipoIdentificacion) :
                new ObjectParameter("TipoIdentificacion", typeof(int));
    
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarCliente", iDCLIENTEParameter, tipoIdentificacionParameter, numeroIdentificacionParameter, nombresParameter, apellidosParameter, telefonoParameter);
        }
    
        public virtual int ActualizarProducto(Nullable<int> idProducto, string nombreproducto, Nullable<int> cantidad, Nullable<decimal> precio)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var nombreproductoParameter = nombreproducto != null ?
                new ObjectParameter("Nombreproducto", nombreproducto) :
                new ObjectParameter("Nombreproducto", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarProducto", idProductoParameter, nombreproductoParameter, cantidadParameter, precioParameter);
        }
    
        public virtual int ActualizarVenta(Nullable<int> idProductoCliente, Nullable<int> idCliente, Nullable<int> idProducto, Nullable<decimal> valorTotal, Nullable<System.DateTime> fechaCompra)
        {
            var idProductoClienteParameter = idProductoCliente.HasValue ?
                new ObjectParameter("IdProductoCliente", idProductoCliente) :
                new ObjectParameter("IdProductoCliente", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var valorTotalParameter = valorTotal.HasValue ?
                new ObjectParameter("ValorTotal", valorTotal) :
                new ObjectParameter("ValorTotal", typeof(decimal));
    
            var fechaCompraParameter = fechaCompra.HasValue ?
                new ObjectParameter("FechaCompra", fechaCompra) :
                new ObjectParameter("FechaCompra", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarVenta", idProductoClienteParameter, idClienteParameter, idProductoParameter, valorTotalParameter, fechaCompraParameter);
        }
    
        public virtual ObjectResult<ConsultarCliente_Result> ConsultarCliente(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarCliente_Result>("ConsultarCliente", idClienteParameter);
        }
    
        public virtual ObjectResult<ConsultarProducto_Result> ConsultarProducto(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarProducto_Result>("ConsultarProducto", idProductoParameter);
        }
    
        public virtual ObjectResult<ConsultarVentas_Result> ConsultarVentas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarVentas_Result>("ConsultarVentas");
        }
    
        public virtual int CrearCliente(Nullable<int> idTipoIdentificacion, string numeroIdentificacion, string nombres, string apellidos, string telefono)
        {
            var idTipoIdentificacionParameter = idTipoIdentificacion.HasValue ?
                new ObjectParameter("idTipoIdentificacion", idTipoIdentificacion) :
                new ObjectParameter("idTipoIdentificacion", typeof(int));
    
            var numeroIdentificacionParameter = numeroIdentificacion != null ?
                new ObjectParameter("NumeroIdentificacion", numeroIdentificacion) :
                new ObjectParameter("NumeroIdentificacion", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrearCliente", idTipoIdentificacionParameter, numeroIdentificacionParameter, nombresParameter, apellidosParameter, telefonoParameter);
        }
    
        public virtual int CrearProducto(string nombreproducto, Nullable<int> cantidad, Nullable<decimal> precio)
        {
            var nombreproductoParameter = nombreproducto != null ?
                new ObjectParameter("Nombreproducto", nombreproducto) :
                new ObjectParameter("Nombreproducto", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrearProducto", nombreproductoParameter, cantidadParameter, precioParameter);
        }
    
        public virtual int InsertarVenta(Nullable<int> idCliente, Nullable<int> idProducto, Nullable<decimal> valorTotal, Nullable<System.DateTime> fechaCompra)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var valorTotalParameter = valorTotal.HasValue ?
                new ObjectParameter("ValorTotal", valorTotal) :
                new ObjectParameter("ValorTotal", typeof(decimal));
    
            var fechaCompraParameter = fechaCompra.HasValue ?
                new ObjectParameter("FechaCompra", fechaCompra) :
                new ObjectParameter("FechaCompra", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarVenta", idClienteParameter, idProductoParameter, valorTotalParameter, fechaCompraParameter);
        }
    
        public virtual ObjectResult<ObtenerProductos_Result> ObtenerProductos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerProductos_Result>("ObtenerProductos");
        }
    }
}
